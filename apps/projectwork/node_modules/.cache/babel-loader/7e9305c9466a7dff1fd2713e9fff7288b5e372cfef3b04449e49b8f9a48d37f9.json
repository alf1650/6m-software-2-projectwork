{"ast":null,"code":"var _jsxFileName = \"/Users/jax/Desktop/sctp-projects/6m-software-2-projectwork/apps/projectwork/src/components/CurrencyConverter.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport converterAPI from \"../api/converterAPI\";\nimport useUserState from \"./userStateContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CurrencyConverter() {\n  _s();\n  const {\n    userCurrency,\n    selectedCountry\n  } = useUserState();\n  const [convertedAmount, setConvertedAmount] = useState(\"1\");\n  const [nativeCurrency, setNativeCurrency] = useState(\"\");\n  const [nativeCurrencyName, setNativeCurrencyName] = useState(\"\");\n  const [isCurrencyLoading, setIsCurrencyLoading] = useState(false);\n  const API_KEYS_ARRAY = process.env.REACT_APP_API_KEY.split(\" \");\n  const CONVERTER_API_KEY = API_KEYS_ARRAY[1];\n  useEffect(() => {\n    const fetchNativeCurrency = async () => {\n      try {\n        const response = await converterAPI.get(\"/country\", {\n          headers: {\n            \"X-Api-Key\": CONVERTER_API_KEY\n          },\n          params: {\n            name: `${selectedCountry.code}`\n          }\n        });\n        if (response.data[0].currency) {\n          return response.data[0].currency;\n        }\n        return;\n      } catch (error) {\n        console.error(\"Error fetching currency:\", error);\n      }\n    };\n    const fetchConvertedAmount = async fetchedCurrencyCode => {\n      try {\n        const response = await converterAPI.get(\"/convertcurrency\", {\n          headers: {\n            \"X-Api-Key\": CONVERTER_API_KEY\n          },\n          params: {\n            want: `${fetchedCurrencyCode}`,\n            have: `${userCurrency}`,\n            amount: 1\n          }\n        });\n        return response.data.new_amount;\n      } catch (error) {\n        console.error(\"Error fetching currency:\", error);\n      }\n    };\n    const currencyConversion = async () => {\n      setIsCurrencyLoading(true);\n      const fetchedCurrency = await fetchNativeCurrency();\n      if (fetchedCurrency === undefined) {\n        const convertedAmount = await fetchConvertedAmount(\"USD\");\n        setNativeCurrency(\"USD\");\n        setNativeCurrencyName(\"No native currency found\");\n        setConvertedAmount(convertedAmount);\n        setIsCurrencyLoading(false);\n      } else {\n        const fetchedCurrency = await fetchConvertedAmount(fetchedCurrency.code);\n        setNativeCurrency(fetchedCurrency.code);\n        setNativeCurrencyName(fetchedCurrency.name);\n        setConvertedAmount(convertedAmount);\n        setIsCurrencyLoading(false);\n      }\n    };\n    currencyConversion();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCountry, userCurrency]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isCurrencyLoading ? /*#__PURE__*/_jsxDEV(\"progress\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : `1 ${currency} = $ ${convertedAmount} ${nativeCurrency} (${nativeCurrencyName.toUpperCase()})`\n  }, void 0, false);\n}\n_s(CurrencyConverter, \"PAj9GYnkaqQD6WIaU7xgEWD0+Ns=\", false, function () {\n  return [useUserState];\n});\n_c = CurrencyConverter;\nexport default CurrencyConverter;\nvar _c;\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"names":["useState","converterAPI","useUserState","jsxDEV","_jsxDEV","Fragment","_Fragment","CurrencyConverter","_s","userCurrency","selectedCountry","convertedAmount","setConvertedAmount","nativeCurrency","setNativeCurrency","nativeCurrencyName","setNativeCurrencyName","isCurrencyLoading","setIsCurrencyLoading","API_KEYS_ARRAY","process","env","REACT_APP_API_KEY","split","CONVERTER_API_KEY","useEffect","fetchNativeCurrency","response","get","headers","params","name","code","data","currency","error","console","fetchConvertedAmount","fetchedCurrencyCode","want","have","amount","new_amount","currencyConversion","fetchedCurrency","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/jax/Desktop/sctp-projects/6m-software-2-projectwork/apps/projectwork/src/components/CurrencyConverter.js"],"sourcesContent":["import { useState } from \"react\";\nimport converterAPI from \"../api/converterAPI\";\nimport useUserState from \"./userStateContext\";\n\nfunction CurrencyConverter() {\n  const { userCurrency, selectedCountry } = useUserState();\n  const [convertedAmount, setConvertedAmount] = useState(\"1\");\n  const [nativeCurrency, setNativeCurrency] = useState(\"\");\n  const [nativeCurrencyName, setNativeCurrencyName] = useState(\"\");\n  const [isCurrencyLoading, setIsCurrencyLoading] = useState(false);\n\n  const API_KEYS_ARRAY = process.env.REACT_APP_API_KEY.split(\" \");\n  const CONVERTER_API_KEY = API_KEYS_ARRAY[1];\n\n  useEffect(() => {\n    const fetchNativeCurrency = async () => {\n      try {\n        const response = await converterAPI.get(\"/country\", {\n          headers: { \"X-Api-Key\": CONVERTER_API_KEY },\n          params: {\n            name: `${selectedCountry.code}`,\n          },\n        });\n        if (response.data[0].currency) {\n          return response.data[0].currency;\n        }\n        return;\n      } catch (error) {\n        console.error(\"Error fetching currency:\", error);\n      }\n    };\n\n    const fetchConvertedAmount = async (fetchedCurrencyCode) => {\n      try {\n        const response = await converterAPI.get(\"/convertcurrency\", {\n          headers: { \"X-Api-Key\": CONVERTER_API_KEY },\n          params: {\n            want: `${fetchedCurrencyCode}`,\n            have: `${userCurrency}`,\n            amount: 1,\n          },\n        });\n        return response.data.new_amount;\n      } catch (error) {\n        console.error(\"Error fetching currency:\", error);\n      }\n    };\n\n    const currencyConversion = async () => {\n      setIsCurrencyLoading(true);\n      const fetchedCurrency = await fetchNativeCurrency();\n      if (fetchedCurrency === undefined) {\n        const convertedAmount = await fetchConvertedAmount(\"USD\");\n        setNativeCurrency(\"USD\");\n        setNativeCurrencyName(\"No native currency found\");\n        setConvertedAmount(convertedAmount);\n        setIsCurrencyLoading(false);\n      } else {\n        const fetchedCurrency = await fetchConvertedAmount(\n          fetchedCurrency.code\n        );\n        setNativeCurrency(fetchedCurrency.code);\n        setNativeCurrencyName(fetchedCurrency.name);\n        setConvertedAmount(convertedAmount);\n        setIsCurrencyLoading(false);\n      }\n    };\n\n    currencyConversion();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedCountry, userCurrency]);\n\n  return (\n    <>\n      {isCurrencyLoading ? (\n        <progress />\n      ) : (\n        `1 ${currency} = $ ${convertedAmount} ${nativeCurrency} (${nativeCurrencyName.toUpperCase()})`\n      )}\n    </>\n  );\n}\n\nexport default CurrencyConverter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}